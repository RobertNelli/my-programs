#import "ViewController.h"

@interface ViewController ()

@end

NSMutableArray *myInitialArray;
NSArray *mySortedArray;
NSString *myStringOfArray;
UILabel *myLabel;

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    
    myInitialArray = [[NSMutableArray alloc]initWithObjects:@1, @205, @10, @7, @899, @0 , @72, @-1, nil];
    
    mySortedArray = [[NSArray alloc]init];
    mySortedArray = [self mergeSorter:myInitialArray];
    
    myStringOfArray = [mySortedArray componentsJoinedByString:@","];
    
    myLabel = [[UILabel alloc]initWithFrame:CGRectMake(20, 30, 300, 50)];
    myLabel.text = myStringOfArray;
    [self.view addSubview:myLabel];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (NSArray *)mergeSorter: (NSArray *)myUnsortedArray {
    
    if(myUnsortedArray.count < 2) return myUnsortedArray;
    
    long middle = myUnsortedArray.count / 2;
    
    NSRange left = NSMakeRange(0, middle);
    NSRange right = NSMakeRange(middle, ([myUnsortedArray count] - middle));
    
    NSArray *leftArray = [myUnsortedArray subarrayWithRange:left];
    NSArray *rightArray = [myUnsortedArray subarrayWithRange:right];
    
    NSArray *result = [self merge:[self mergeSorter:leftArray] andRight:[self mergeSorter:rightArray]];
    return result;
    
}

-(NSArray *)merge: (NSArray *)leftArr andRight:(NSArray *)rightArr {
    NSMutableArray *result = [[NSMutableArray alloc] init];
    int right = 0;
    int left = 0;
    
    while (left < [leftArr count] && right < [rightArr count]) {
        NSComparisonResult compare = [leftArr[left] compare:rightArr[right]];
        if (compare != NSOrderedDescending) {
            [result addObject:[leftArr objectAtIndex:left++]];
            
        } else {
            [result addObject:[rightArr objectAtIndex:right++]];
            
        }
    }
    
    NSRange leftRange = NSMakeRange(left, [leftArr count] - left);
    NSRange rightRange = NSMakeRange(right, [rightArr count] - right);
    
    NSArray *newRight = [rightArr subarrayWithRange:rightRange];
    NSArray *newLeft = [leftArr subarrayWithRange:leftRange];
    
    newLeft = [result arrayByAddingObjectsFromArray:newLeft];
    return [newLeft arrayByAddingObjectsFromArray:newRight];
    
    
}
